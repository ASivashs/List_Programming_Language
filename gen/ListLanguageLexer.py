# Generated from C:/University/6_sem/YAPIS/grammar\ListLanguage_exceptions.g4 by ANTLR 4.12.0
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,42,244,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,4,1,4,1,4,
        1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,11,1,11,1,
        11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,
        15,1,15,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,1,20,1,21,1,
        21,1,22,1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,
        28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,
        34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,36,1,37,1,37,1,37,1,38,1,
        38,1,38,1,39,1,39,5,39,223,8,39,10,39,12,39,226,9,39,1,40,1,40,5,
        40,230,8,40,10,40,12,40,233,9,40,1,40,3,40,236,8,40,1,41,4,41,239,
        8,41,11,41,12,41,240,1,41,1,41,0,0,42,1,1,3,2,5,3,7,4,9,5,11,6,13,
        7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,
        37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,
        59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,
        81,41,83,42,1,0,6,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,
        122,1,0,49,57,1,0,48,57,1,0,48,48,3,0,9,10,13,13,32,32,247,0,1,1,
        0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,
        0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,
        0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,
        0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,
        0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,
        0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,
        0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,
        0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,
        0,0,83,1,0,0,0,1,85,1,0,0,0,3,91,1,0,0,0,5,97,1,0,0,0,7,103,1,0,
        0,0,9,107,1,0,0,0,11,111,1,0,0,0,13,117,1,0,0,0,15,120,1,0,0,0,17,
        123,1,0,0,0,19,128,1,0,0,0,21,133,1,0,0,0,23,137,1,0,0,0,25,141,
        1,0,0,0,27,148,1,0,0,0,29,155,1,0,0,0,31,161,1,0,0,0,33,168,1,0,
        0,0,35,170,1,0,0,0,37,172,1,0,0,0,39,174,1,0,0,0,41,176,1,0,0,0,
        43,178,1,0,0,0,45,180,1,0,0,0,47,182,1,0,0,0,49,184,1,0,0,0,51,186,
        1,0,0,0,53,188,1,0,0,0,55,190,1,0,0,0,57,192,1,0,0,0,59,194,1,0,
        0,0,61,196,1,0,0,0,63,198,1,0,0,0,65,201,1,0,0,0,67,203,1,0,0,0,
        69,205,1,0,0,0,71,208,1,0,0,0,73,211,1,0,0,0,75,214,1,0,0,0,77,217,
        1,0,0,0,79,220,1,0,0,0,81,235,1,0,0,0,83,238,1,0,0,0,85,86,5,105,
        0,0,86,87,5,110,0,0,87,88,5,112,0,0,88,89,5,117,0,0,89,90,5,116,
        0,0,90,2,1,0,0,0,91,92,5,112,0,0,92,93,5,114,0,0,93,94,5,105,0,0,
        94,95,5,110,0,0,95,96,5,116,0,0,96,4,1,0,0,0,97,98,5,114,0,0,98,
        99,5,97,0,0,99,100,5,110,0,0,100,101,5,103,0,0,101,102,5,101,0,0,
        102,6,1,0,0,0,103,104,5,100,0,0,104,105,5,101,0,0,105,106,5,102,
        0,0,106,8,1,0,0,0,107,108,5,102,0,0,108,109,5,111,0,0,109,110,5,
        114,0,0,110,10,1,0,0,0,111,112,5,119,0,0,112,113,5,104,0,0,113,114,
        5,105,0,0,114,115,5,108,0,0,115,116,5,101,0,0,116,12,1,0,0,0,117,
        118,5,105,0,0,118,119,5,110,0,0,119,14,1,0,0,0,120,121,5,105,0,0,
        121,122,5,102,0,0,122,16,1,0,0,0,123,124,5,101,0,0,124,125,5,108,
        0,0,125,126,5,115,0,0,126,127,5,101,0,0,127,18,1,0,0,0,128,129,5,
        101,0,0,129,130,5,108,0,0,130,131,5,105,0,0,131,132,5,102,0,0,132,
        20,1,0,0,0,133,134,5,103,0,0,134,135,5,101,0,0,135,136,5,116,0,0,
        136,22,1,0,0,0,137,138,5,112,0,0,138,139,5,111,0,0,139,140,5,112,
        0,0,140,24,1,0,0,0,141,142,5,97,0,0,142,143,5,112,0,0,143,144,5,
        112,0,0,144,145,5,101,0,0,145,146,5,110,0,0,146,147,5,100,0,0,147,
        26,1,0,0,0,148,149,5,114,0,0,149,150,5,101,0,0,150,151,5,109,0,0,
        151,152,5,111,0,0,152,153,5,118,0,0,153,154,5,101,0,0,154,28,1,0,
        0,0,155,156,5,99,0,0,156,157,5,108,0,0,157,158,5,101,0,0,158,159,
        5,97,0,0,159,160,5,114,0,0,160,30,1,0,0,0,161,162,5,114,0,0,162,
        163,5,101,0,0,163,164,5,116,0,0,164,165,5,117,0,0,165,166,5,114,
        0,0,166,167,5,110,0,0,167,32,1,0,0,0,168,169,5,58,0,0,169,34,1,0,
        0,0,170,171,5,46,0,0,171,36,1,0,0,0,172,173,5,44,0,0,173,38,1,0,
        0,0,174,175,5,34,0,0,175,40,1,0,0,0,176,177,5,40,0,0,177,42,1,0,
        0,0,178,179,5,41,0,0,179,44,1,0,0,0,180,181,5,91,0,0,181,46,1,0,
        0,0,182,183,5,93,0,0,183,48,1,0,0,0,184,185,5,123,0,0,185,50,1,0,
        0,0,186,187,5,125,0,0,187,52,1,0,0,0,188,189,5,61,0,0,189,54,1,0,
        0,0,190,191,5,43,0,0,191,56,1,0,0,0,192,193,5,45,0,0,193,58,1,0,
        0,0,194,195,5,42,0,0,195,60,1,0,0,0,196,197,5,47,0,0,197,62,1,0,
        0,0,198,199,5,42,0,0,199,200,5,42,0,0,200,64,1,0,0,0,201,202,5,60,
        0,0,202,66,1,0,0,0,203,204,5,62,0,0,204,68,1,0,0,0,205,206,5,61,
        0,0,206,207,5,61,0,0,207,70,1,0,0,0,208,209,5,62,0,0,209,210,5,61,
        0,0,210,72,1,0,0,0,211,212,5,60,0,0,212,213,5,61,0,0,213,74,1,0,
        0,0,214,215,5,60,0,0,215,216,5,62,0,0,216,76,1,0,0,0,217,218,5,33,
        0,0,218,219,5,61,0,0,219,78,1,0,0,0,220,224,7,0,0,0,221,223,7,1,
        0,0,222,221,1,0,0,0,223,226,1,0,0,0,224,222,1,0,0,0,224,225,1,0,
        0,0,225,80,1,0,0,0,226,224,1,0,0,0,227,231,7,2,0,0,228,230,7,3,0,
        0,229,228,1,0,0,0,230,233,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,
        0,232,236,1,0,0,0,233,231,1,0,0,0,234,236,7,4,0,0,235,227,1,0,0,
        0,235,234,1,0,0,0,236,82,1,0,0,0,237,239,7,5,0,0,238,237,1,0,0,0,
        239,240,1,0,0,0,240,238,1,0,0,0,240,241,1,0,0,0,241,242,1,0,0,0,
        242,243,6,41,0,0,243,84,1,0,0,0,5,0,224,231,235,240,1,6,0,0
    ]

class ListLanguageLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    INPUT = 1
    PRINT = 2
    RANGE = 3
    DEF = 4
    FOR = 5
    WHILE = 6
    IN = 7
    IF = 8
    ELSE = 9
    ELIF = 10
    GET = 11
    POP = 12
    APPEND = 13
    REMOVE = 14
    CLEAR = 15
    RETURN = 16
    TWO_POINT = 17
    POINT_FOR_M = 18
    COMMA = 19
    OPEN_CLOSE_EL = 20
    OPEN_PAREN = 21
    CLOSE_PAREN = 22
    OPEN_BRACK = 23
    CLOSE_BRACK = 24
    OPEN_BRACE = 25
    CLOSE_BRACE = 26
    ASSIGN = 27
    ADD = 28
    MINUS = 29
    MUL = 30
    DIV = 31
    POW = 32
    LESS_THAN = 33
    GREATER_THAN = 34
    EQUALS = 35
    GT_EQ = 36
    LT_EQ = 37
    NOT_EQ_1 = 38
    NOT_EQ_2 = 39
    ID = 40
    NUM = 41
    WS = 42

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'input'", "'print'", "'range'", "'def'", "'for'", "'while'", 
            "'in'", "'if'", "'else'", "'elif'", "'get'", "'pop'", "'append'", 
            "'remove'", "'clear'", "'return'", "':'", "'.'", "','", "'\"'", 
            "'('", "')'", "'['", "']'", "'{'", "'}'", "'='", "'+'", "'-'", 
            "'*'", "'/'", "'**'", "'<'", "'>'", "'=='", "'>='", "'<='", 
            "'<>'", "'!='" ]

    symbolicNames = [ "<INVALID>",
            "INPUT", "PRINT", "RANGE", "DEF", "FOR", "WHILE", "IN", "IF", 
            "ELSE", "ELIF", "GET", "POP", "APPEND", "REMOVE", "CLEAR", "RETURN", 
            "TWO_POINT", "POINT_FOR_M", "COMMA", "OPEN_CLOSE_EL", "OPEN_PAREN", 
            "CLOSE_PAREN", "OPEN_BRACK", "CLOSE_BRACK", "OPEN_BRACE", "CLOSE_BRACE", 
            "ASSIGN", "ADD", "MINUS", "MUL", "DIV", "POW", "LESS_THAN", 
            "GREATER_THAN", "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", 
            "ID", "NUM", "WS" ]

    ruleNames = [ "INPUT", "PRINT", "RANGE", "DEF", "FOR", "WHILE", "IN", 
                  "IF", "ELSE", "ELIF", "GET", "POP", "APPEND", "REMOVE", 
                  "CLEAR", "RETURN", "TWO_POINT", "POINT_FOR_M", "COMMA", 
                  "OPEN_CLOSE_EL", "OPEN_PAREN", "CLOSE_PAREN", "OPEN_BRACK", 
                  "CLOSE_BRACK", "OPEN_BRACE", "CLOSE_BRACE", "ASSIGN", 
                  "ADD", "MINUS", "MUL", "DIV", "POW", "LESS_THAN", "GREATER_THAN", 
                  "EQUALS", "GT_EQ", "LT_EQ", "NOT_EQ_1", "NOT_EQ_2", "ID", 
                  "NUM", "WS" ]

    grammarFileName = "ListLanguage_exceptions.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.12.0")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


